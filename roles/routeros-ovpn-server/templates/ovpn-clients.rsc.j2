/log warning "Configuring OVPN clients"

/certificate export-certificate {{ client_certs[0].ros_cert_ca_name }}

{% for client in ros_ovpn_srv_clients.values() | list %}
/ppp secret
:if ([/ppp secret find name={{ client.name }}]) do={/ppp secret set {{ client.name }} password={{ client.password }} remote-address={{ client.address }} profile={{ ros_ovpn_srv_profile }} disabled=no} else={/ppp secret add name={{ client.name }} password={{ client.password }} remote-address={{ client.address }} profile={{ ros_ovpn_srv_profile }} disabled=no}

/interface ovpn-server
:if ([/interface ovpn-server find name=ovpn-{{ client.name }}]) do={/interface ovpn-server set ovpn-{{ client.name }} user={{ client.name }}} else={/interface ovpn-server add name=ovpn-{{ client.name }} user={{ client.name }}}

/certificate export-certificate {{ client.name }} type=pem export-passphrase={{ client.password }}

/ip firewall address-list
{% for network in client['allowed_networks'] %}
:if ([/ip firewall address-list find list={{ client.name }} address={{ network }}] ="") do={/ip firewall address-list add list={{ client.name }} address={{ network }}; :put "SUCCESS: Address List Added"} else={:put "SUCCESS: Address List already exists"}
{% endfor %}

/ip firewall filter
:if ([/ip firewall filter find comment={{ ros_ovpn_srv_profile }}-Forward-Allow-{{ client.name }}] ="") do={/ip firewall filter add chain={{ ros_ovpn_srv_profile }}-Forward-Allow action=accept in-interface=ovpn-{{ client.name }} dst-address-list={{ client.name }} comment={{ ros_ovpn_srv_profile }}-Forward-Allow-{{ client.name }}; :put "SUCCESS: Firewall rule Added"} else={:put "SUCCESS: Firewall rule already exists"}
{% endfor %}
